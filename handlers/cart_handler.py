import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext
from mongodb import db, cart_collection
from datetime import datetime
import time
from telegram import LabeledPrice
from telegram import PreCheckoutQuery


logging.basicConfig(level=logging.INFO)


async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    logging.info("–ö–Ω–æ–ø–∫—É '–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫' –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ.")  # –õ–æ–≥ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏

    # –ü–∞—Ä—Å–∏–Ω–≥ product_id –∑ callback data
    try:
        _, product_id = query.data.split("_")
        product_id = int(product_id)  # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ product_id —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º
        logging.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ product_id: {product_id}")  # –õ–æ–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–≥–æ product_id
    except (IndexError, ValueError) as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É callback –¥–∞–Ω–∏—Ö: {str(e)}")  # –õ–æ–≥ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ
        await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –≤ –∫–æ—à–∏–∫.")
        return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç –∑ MongoDB
    product = db.products.find_one({"product_id": product_id})
    if not product:
        logging.error(f"–ü—Ä–æ–¥—É–∫—Ç –∑ ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")  # –õ–æ–≥, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        await query.message.reply_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: {product['product_name']}")  # –õ–æ–≥, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –∑–Ω–∞–π–¥–µ–Ω–æ

    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è telegram_id –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—à–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = update.effective_user.id

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä –¥–ª—è –∫–æ—à–∏–∫–∞
    cart_item = {
        "product_id": product["product_id"],
        "product_name": product["product_name"],
        "price": product["price"],
        "quantity": 1,  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        "total_price": product["price"]
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–∏–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_cart = cart_collection.find_one({"telegram_id": telegram_id, "status": "active"})
    logging.info(f"–ö–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ: {user_cart is not None}")  # –õ–æ–≥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—à–∏–∫–∞

    if user_cart:
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –≤–∂–µ —ñ—Å–Ω—É—î, –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        existing_product = next((item for item in user_cart["products"] if item["product_id"] == product_id), None)
        
        if existing_product:
            logging.info(f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –≤–∂–µ –≤ –∫–æ—à–∏–∫—É. –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")  # –õ–æ–≥, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –≤–∂–µ –≤ –∫–æ—à–∏–∫—É
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
            db.cart.update_one(
                {"telegram_id": telegram_id, "status": "active", "products.product_id": product_id},
                {
                    "$inc": {
                        "products.$.quantity": 1,  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞ 1
                        "products.$.total_price": product["price"],  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—É
                        "total_price": product["price"]  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –∫–æ—à–∏–∫–∞
                    }
                }
            )
        else:
            logging.info(f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –≤ –∫–æ—à–∏–∫—É. –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä.")  # –õ–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ –∫–æ—à–∏–∫
            db.cart.update_one(
                {"telegram_id": telegram_id, "status": "active"},
                {
                    "$push": {"products": cart_item},  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –¥–æ –º–∞—Å–∏–≤—É –∫–æ—à–∏–∫–∞
                    "$inc": {"total_price": product["price"]}  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –∫–æ—à–∏–∫–∞
                }
            )
    else:
        logging.info("–ê–∫—Ç–∏–≤–Ω–∏–π –∫–æ—à–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–æ—à–∏–∫.")  # –õ–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—à–∏–∫–∞
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—à–∏–∫–∞, —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ —ñ—Å–Ω—É—î
        new_cart = {
            "telegram_id": telegram_id,
            "products": [cart_item],
            "total_price": product["price"],
            "status": "active",
            "created_at": datetime.utcnow()
        }
        db.cart.insert_one(new_cart)

    # –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data=f"delete_item_{product_id}"),
            InlineKeyboardButton("üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="view_cart")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    logging.info(f"{product['product_name']} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫.")  # –õ–æ–≥ —É—Å–ø—ñ—à–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫
    await query.message.reply_text(f"{product['product_name']} –¥–æ–¥–∞–Ω–æ —É –≤–∞—à –∫–æ—à–∏–∫.", reply_markup=reply_markup)


async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    try:
        # –°–∫–æ—Ä–µ–≥–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–æ–∑–±–æ—Ä—É callback –¥–∞–Ω–∏—Ö
        callback_data = query.data
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω—ñ callback –¥–∞–Ω—ñ –¥–ª—è delete_item: {callback_data}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —Ç–∞ —Ä–æ–∑–±—ñ—Ä callback –¥–∞–Ω–∏—Ö
        if not callback_data.startswith("delete_item_"):
            logging.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–∏—Ö.")
            await query.message.reply_text("–ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è.")
            return

        # –†–æ–∑–±—ñ—Ä —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –ø—Ä–æ–¥—É–∫—Ç—É
        product_id = int(callback_data.split("_")[-1])
        logging.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ product_id –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {product_id}")

    except (ValueError, IndexError) as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É callback –¥–∞–Ω–∏—Ö –¥–ª—è delete_item: {str(e)}")
        await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ –∫–æ—à–∏–∫–∞.")
        return

    telegram_id = update.effective_user.id

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç –∑ –∫–æ—à–∏–∫–∞ –¥–ª—è –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏
    user_cart = cart_collection.find_one({"telegram_id": telegram_id, "status": "active"})
    product = next((item for item in user_cart["products"] if item["product_id"] == product_id), None)
    if not product:
        logging.info(f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—à–∏–∫—É.")
        await query.message.reply_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—à–æ–º—É –∫–æ—à–∏–∫—É.")
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ –∫–æ—à–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    result = cart_collection.update_one(
        {"telegram_id": telegram_id, "status": "active"},
        {
            "$pull": {"products": {"product_id": product_id}},
            "$inc": {"total_price": -product["total_price"]}
        }
    )

    if result.modified_count > 0:
        logging.info(f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞.")
        await query.message.reply_text(f"{product['product_name']} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≤–∞—à–æ–≥–æ –∫–æ—à–∏–∫–∞.")
    else:
        await query.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    telegram_id = update.effective_user.id
    cart_collection.update_one(
        {"telegram_id": telegram_id, "status": "active"},
        {"$set": {"products": [], "total_price": 0}}
    )
    logging.info("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: %s", telegram_id)
    await update.callback_query.message.reply_text("–í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")



async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    telegram_id = update.effective_user.id
    user_cart = cart_collection.find_one({"telegram_id": telegram_id, "status": "active"})

    if user_cart and user_cart.get("products"):
        cart_summary = "üõí **–í–∞—à –∫–æ—à–∏–∫**:\n"
        for item in user_cart["products"]:
            cart_summary += (
                f"{item['quantity']} –æ–¥. {item['product_name']} x {item['price']}–≥—Ä–Ω. "
                f"= {item['total_price']} –≥—Ä–Ω.\n"
            )
        cart_summary += f"\n**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: **{user_cart['total_price']} –≥—Ä–Ω."

        # Add the "Send Invoice" button to the keyboard
        keyboard = [
            [
                InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", callback_data="proceed_to_payment")  # New button
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")  # Existing button
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        logging.info("–ö–æ—à–∏–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: %s", telegram_id)
        await update.callback_query.message.reply_text(cart_summary, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        logging.info("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ—à–∏–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: %s", telegram_id)
        await update.callback_query.message.reply_text("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")



async def send_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    telegram_id = update.effective_user.id
    user_cart = cart_collection.find_one({"telegram_id": telegram_id, "status": "active"})

    if not user_cart or not user_cart.get("products"):
        await update.callback_query.message.reply_text("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    # Calculate total amount in kopecks (smallest currency unit)
    total_amount = sum(item["total_price"] * 100 for item in user_cart["products"])  # Total amount in kopecks

    # Ensure total amount consistency
    if total_amount != user_cart['total_price'] * 100:
        logging.error(f"Total amount mismatch: calculated {total_amount}, but user cart total {user_cart['total_price'] * 100}")

    # Create LabeledPrice objects for each product in the cart
    prices = [
        LabeledPrice(label=item["product_name"], amount=item["total_price"] * 100)  # Convert to kopecks
        for item in user_cart["products"]
    ]

    try:
        # Ensure you use the correct provider token (this should be your valid TEST provider token)
        provider_token = '1661751239:TEST:07zR-X7X6-nkY8-s3KP'  # Replace this with your valid provider token

        # Send the invoice to the user
        await update.callback_query.message.reply_invoice(
            provider_token=provider_token,
            title="–í–∞—à —Ä–∞—Ö—É–Ω–æ–∫",
            description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä(–∏)",
            payload=f"invoice_{telegram_id}_{int(time.time())}",
            currency="UAH",  # Ensure currency is correct (UAH in this case)
            prices=prices,  # List of LabeledPrice
            need_shipping_address=True,  # Request for shipping address
            need_email=True,  # Request for email
        )

        logging.info(f"Invoice for {total_amount / 100} UAH sent to user {telegram_id}.")
    except Exception as e:
        logging.error(f"Error sending invoice: {e}")
        await update.callback_query.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑'—î–¥–Ω–∞–Ω–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –æ–ø–ª–∞—Ç–∏.")


async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.pre_checkout_query
    # Answer the pre-checkout query to proceed with the payment
    await query.answer(ok=True)  # Set to `ok=False` if you want to decline the payment
    logging.info("Pre-checkout query successfully answered.")

# Payment successful handler
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    telegram_id = update.effective_user.id
    logging.info(f"Payment successful for user {telegram_id}. Transaction details: {update.message.successful_payment}")
    await update.message.reply_text("Thank you! Your payment was successful.")